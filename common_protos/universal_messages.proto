syntax = "proto2";

package scaii.common;

message MultiMessage {
	repeated ScaiiPacket packets = 1;
}

message ScaiiPacket {
	oneof specific_msg {
		State state = 1;
		Action action = 2;
		Viz viz = 3;
		Error err = 4;
		Cfg config = 5;
		SupportedBehavior supported = 6;
		SerializationRequest ser_req = 7;
		SerializationResponse ser_resp = 8;
		bool reset_env = 9;
		VizInit viz_init = 10;
		Other other = 29;
	}
	
	required Endpoint src = 31;
	required Endpoint dest = 30;
}

message Endpoint {
	oneof endpoint {
		BackendEndpoint backend = 1;
		AgentEndpoint agent = 2;
		CoreEndpoint core = 3;
		ModuleEndpoint module = 4;
	}
}

message BackendEndpoint {}
message AgentEndpoint {}
message CoreEndpoint {}
message ModuleEndpoint {
	required string name = 1;
}

message Cfg {
	oneof which_module {
		CoreCfg core_cfg = 1;
		BackendCfg backend_cfg = 2;
		AgentCfg agent_cfg = 3;
		ModuleCfg module_cfg = 4;
	}
}

message PluginType {
	oneof plugin_type {
		RustFFIConfig rust_plugin = 1;
	}
}

message CoreCfg {
	required PluginType plugin_type = 1;
}

message BackendInit {}

message ModuleInit {
	required string name = 1;
}

message InitAs {
	oneof init_as {
		BackendInit backend = 1;
		ModuleInit module = 2;
	}
}

message RustFFIConfig {
	required string plugin_path = 1;
	required InitAs init_as = 2;
}

message BackendCfg {
	extensions 10 to max;
}

message AgentCfg {
	extensions 10 to max;
}

message ModuleCfg {
	extensions 10 to max;
}

message SupportedBehavior {
	oneof which_module {
		BackendSupported backend = 1;
		AgentSupported agent = 2;
		ModuleSupported generic_module = 5;
	}
}

message BackendSupported {
	enum SerializationSupport {
		NONE = 0;
		DIVERGING_ONLY = 1;
		NONDIVERGING_ONLY = 2;
		FULL = 3;
	}
	required SerializationSupport serialization_support = 1;
	extensions 100 to max;
}

message AgentSupported {
	extensions 100 to max;
}

message ModuleSupported {
	extensions 100 to max;
}

message State {
 	repeated double features = 1;
	repeated uint32 feature_array_dims = 2;
	 
	optional double reward = 3;
	
	extensions 10 to max;
}

message Action {
	repeated int32 discrete_actions = 1;
	repeated double continuous_actions = 2;
	
	extensions 10 to max;
}

message Error {
	required string description = 1;
	optional bool fatal = 2 [default=false];

	extensions 10 to max;
}

message Other {
	required string name = 1;
	
	extensions 10 to max;
}

enum SerializationFormat {
	DIVERGING = 0;
	NONDIVERGING = 1;
}

message SerializationRequest {
	required SerializationFormat format = 1;
}

message SerializationResponse {
	required bytes serialized = 1;
	required SerializationFormat format = 2;
}

/// A marker for now, at the moment there's nothing we need to init.
message VizInit {

}

// The packet containing what to draw. This is ALWAYS
// a delta, so the first packet should contain all
// information. Future packets need only contain information
// on what has changed since the last packet.
message Viz {
	repeated Entity entities = 1; 
}

// An drawable object
message Entity {
	// This is not globally unique, but rather
	// unique to the sender of the packet
	// (that is, the Endpoint reigstered as the
	// "src" of the enclosing ScaiiPacket).
	//
	// This is so multiple modules do not need to
	// coordinate their visualization IDs.
	required uint64 id = 1;

	// The absolute position of the entity,
	// objects are drawn as if this is the
	// center
	optional Pos pos = 2;

	// A series of shapes that represent this
	// entity
	repeated Shape shapes = 3;

	// Delete this entity, this does
	// NOT trigger any death animations,
	// you must orchestrate those yourself.
	//
	// If this is true, the other fields are
	// ignored (except ID, naturally).
	required bool delete = 4;
}

// A position.
// The positions x and y can be interpreted
// roughly as pixels.
message Pos {
	optional float x = 1;
	optional float y = 2;
}

// Note, since protobuf has no single "byte"
// type, please clamp these values in [0,255]
// yourself
//
// Fields are required since updating the
// values individually can be a pain in
// some libraries
message Color {
	required uint32 r = 1;
	required uint32 g = 2;
	required uint32 b = 3;
	required uint32 a = 4;
}

// An equilateral triangle with a base
// of the given length
message Triangle {
	optional float base_len = 1;
}


// A rectangle
message Rect {
	optional float width = 1;
	optional float height = 2;
}

// An arbitrary shape relative to the center
// of the entity it belongs to
message Shape {
	// This ID is relative to the entity, not
	// universally unique to the program
	required uint64 id = 1;
	optional Pos relative_pos = 2;
	optional Color color = 3;

	// What form the shape takes
	// if multiple of these are set at once, the behavior
	// is up to the viz engine implementer,
	// and may not be consistent between packets
	optional Rect rect = 20;
	optional Triangle triangle = 21;

	// delete this shape from the entity
	// if this ID is not registered, it is a
	// no-op
	//
	// If this is ture, the other fields (except ID)
	// are ignored
	required bool delete = 40;
}
