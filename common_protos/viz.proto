syntax = "proto2";

package scaii.common;

// A message to initialize the visualization environment.
//
// In the future this will contain things like sprite sheet paths
// and animation info for certain classes of entities.  At this point
// the only field is a flog to control whether viz will run in test 
// mode (which means it will echo back state after state updates) or
// non-test mode (which means it will send back an RpcAck)
message VizInit {
	optional bool test_mode = 1;
    optional uint32 step_count = 2;
    optional uint32 gameboard_width = 3;
    optional uint32 gameboard_height = 4;
    repeated ExplanationPoint explanations = 5;
}
message ExplanationPoint {
	// which step in the game this explanation corresponds to
    optional uint32 step = 1;
	// the id will be a one-up number that may or may not be equiv to the step
    optional uint32 id = 2; 
	// short identifier to be shown on timeline (ex "knight attacks x")
    optional string title = 3; 
	// longer string that could be shown in tooltip on mouseover  
	// (if the particular explanation system in play can generate a meaningful summary) 
    optional string description = 4;  
}
// The packet containing what to draw. This is ALWAYS
// a delta, so the first packet should contain all
// information. Future packets need only contain information
// on what has changed since the last packet.
message Viz {
	repeated Entity entities = 1; 
	optional ChartInfo chart = 2;
	optional uint32 step = 3;
}
// chart info for Magesh data demo
message ChartInfo {
	optional string chart_title = 1;
	optional string h_axis_title = 2;
	optional string v_axis_title = 3;
	optional ChartActions actions = 4;
	repeated ChartValueVector value_vectors = 5;
}
message ChartActions {
	optional string actions_label = 1;
	repeated string action_names = 2;
}
message ChartValueVector {
	optional string label = 1;
	repeated double action_values = 2;
}

// An drawable object
message Entity {
	// This is not globally unique, but rather
	// unique to the sender of the packet
	// (that is, the Endpoint reigstered as the
	// "src" of the enclosing `ScaiiPacket`).
	//
	// This is so multiple modules do not need to
	// coordinate their visualization IDs.
	required uint64 id = 1;

	// The absolute position of the entity,
	// objects are drawn as if this is the
	// center
	optional Pos pos = 2;

	// A series of shapes that represent this
	// entity
	repeated Shape shapes = 3;

	// Delete this entity, this does
	// NOT trigger any death animations,
	// you must orchestrate those yourself.
	//
	// If this is true, the other fields are
	// ignored (except ID, naturally).
	required bool delete = 4;
}

// A position.
// The positions x and y can be interpreted
// roughly as pixels.
message Pos {
	optional double x = 1;
	optional double y = 2;
}

// Note, since protobuf has no single "byte"
// type, please clamp these values in [0,255]
// yourself
//
// Fields are required since updating the
// values individually can be a pain in
// some libraries
message Color {
	required uint32 r = 1;
	required uint32 g = 2;
	required uint32 b = 3;
	required uint32 a = 4;
}

// An equilateral triangle with a base
// of the given length
message Triangle {
	optional double base_len = 1;
}


// A rectangle
message Rect {
	optional double width = 1;
	optional double height = 2;
}

// An arbitrary shape relative to the center
// of the entity it belongs to
message Shape {
	// This ID is relative to the entity, not
	// universally unique to the program
	required uint64 id = 1;
	optional Pos relative_pos = 2;
	optional Color color = 3;

	// What form the shape takes
	// if multiple of these are set at once, the behavior
	// is up to the viz engine implementer,
	// and may not be consistent between packets
	optional Rect rect = 20;
	optional Triangle triangle = 21;

	// delete this shape from the entity
	// if this ID is not registered, it is a
	// no-op
	//
	// If this is ture, the other fields (except ID)
	// are ignored
	required bool delete = 40;
}
