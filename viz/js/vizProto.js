/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.scaii.common.Action');
goog.provide('proto.scaii.common.AgentCfg');
goog.provide('proto.scaii.common.AgentEndpoint');
goog.provide('proto.scaii.common.AgentSupported');
goog.provide('proto.scaii.common.BackendCfg');
goog.provide('proto.scaii.common.BackendEndpoint');
goog.provide('proto.scaii.common.BackendInit');
goog.provide('proto.scaii.common.BackendSupported');
goog.provide('proto.scaii.common.BackendSupported.SerializationSupport');
goog.provide('proto.scaii.common.Cfg');
goog.provide('proto.scaii.common.Color');
goog.provide('proto.scaii.common.CoreCfg');
goog.provide('proto.scaii.common.CoreEndpoint');
goog.provide('proto.scaii.common.Endpoint');
goog.provide('proto.scaii.common.Entity');
goog.provide('proto.scaii.common.Error');
goog.provide('proto.scaii.common.InitAs');
goog.provide('proto.scaii.common.ModuleCfg');
goog.provide('proto.scaii.common.ModuleEndpoint');
goog.provide('proto.scaii.common.ModuleInit');
goog.provide('proto.scaii.common.ModuleSupported');
goog.provide('proto.scaii.common.MultiMessage');
goog.provide('proto.scaii.common.Other');
goog.provide('proto.scaii.common.PluginType');
goog.provide('proto.scaii.common.Pos');
goog.provide('proto.scaii.common.Rect');
goog.provide('proto.scaii.common.RustFFIConfig');
goog.provide('proto.scaii.common.ScaiiPacket');
goog.provide('proto.scaii.common.SerializationFormat');
goog.provide('proto.scaii.common.SerializationRequest');
goog.provide('proto.scaii.common.SerializationResponse');
goog.provide('proto.scaii.common.Shape');
goog.provide('proto.scaii.common.State');
goog.provide('proto.scaii.common.SupportedBehavior');
goog.provide('proto.scaii.common.Triangle');
goog.provide('proto.scaii.common.Viz');
goog.provide('proto.scaii.common.VizInit');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.MultiMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scaii.common.MultiMessage.repeatedFields_, null);
};
goog.inherits(proto.scaii.common.MultiMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.MultiMessage.displayName = 'proto.scaii.common.MultiMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scaii.common.MultiMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.MultiMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.MultiMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.MultiMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.MultiMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetsList: jspb.Message.toObjectList(msg.getPacketsList(),
    proto.scaii.common.ScaiiPacket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.MultiMessage}
 */
proto.scaii.common.MultiMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.MultiMessage;
  return proto.scaii.common.MultiMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.MultiMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.MultiMessage}
 */
proto.scaii.common.MultiMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.ScaiiPacket;
      reader.readMessage(value,proto.scaii.common.ScaiiPacket.deserializeBinaryFromReader);
      msg.addPackets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.MultiMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.MultiMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.MultiMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.MultiMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scaii.common.ScaiiPacket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ScaiiPacket packets = 1;
 * @return {!Array.<!proto.scaii.common.ScaiiPacket>}
 */
proto.scaii.common.MultiMessage.prototype.getPacketsList = function() {
  return /** @type{!Array.<!proto.scaii.common.ScaiiPacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scaii.common.ScaiiPacket, 1));
};


/** @param {!Array.<!proto.scaii.common.ScaiiPacket>} value */
proto.scaii.common.MultiMessage.prototype.setPacketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scaii.common.ScaiiPacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scaii.common.ScaiiPacket}
 */
proto.scaii.common.MultiMessage.prototype.addPackets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scaii.common.ScaiiPacket, opt_index);
};


proto.scaii.common.MultiMessage.prototype.clearPacketsList = function() {
  this.setPacketsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.ScaiiPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.ScaiiPacket.oneofGroups_);
};
goog.inherits(proto.scaii.common.ScaiiPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.ScaiiPacket.displayName = 'proto.scaii.common.ScaiiPacket';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.ScaiiPacket.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,29]];

/**
 * @enum {number}
 */
proto.scaii.common.ScaiiPacket.SpecificMsgCase = {
  SPECIFIC_MSG_NOT_SET: 0,
  STATE: 1,
  ACTION: 2,
  VIZ: 3,
  ERR: 4,
  CONFIG: 5,
  SUPPORTED: 6,
  SER_REQ: 7,
  SER_RESP: 8,
  RESET_ENV: 9,
  VIZ_INIT: 10,
  OTHER: 29
};

/**
 * @return {proto.scaii.common.ScaiiPacket.SpecificMsgCase}
 */
proto.scaii.common.ScaiiPacket.prototype.getSpecificMsgCase = function() {
  return /** @type {proto.scaii.common.ScaiiPacket.SpecificMsgCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.ScaiiPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.ScaiiPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.ScaiiPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.ScaiiPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ScaiiPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.scaii.common.State.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.scaii.common.Action.toObject(includeInstance, f),
    viz: (f = msg.getViz()) && proto.scaii.common.Viz.toObject(includeInstance, f),
    err: (f = msg.getErr()) && proto.scaii.common.Error.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.scaii.common.Cfg.toObject(includeInstance, f),
    supported: (f = msg.getSupported()) && proto.scaii.common.SupportedBehavior.toObject(includeInstance, f),
    serReq: (f = msg.getSerReq()) && proto.scaii.common.SerializationRequest.toObject(includeInstance, f),
    serResp: (f = msg.getSerResp()) && proto.scaii.common.SerializationResponse.toObject(includeInstance, f),
    resetEnv: jspb.Message.getField(msg, 9),
    vizInit: (f = msg.getVizInit()) && proto.scaii.common.VizInit.toObject(includeInstance, f),
    other: (f = msg.getOther()) && proto.scaii.common.Other.toObject(includeInstance, f),
    src: (f = msg.getSrc()) && proto.scaii.common.Endpoint.toObject(includeInstance, f),
    dest: (f = msg.getDest()) && proto.scaii.common.Endpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.ScaiiPacket}
 */
proto.scaii.common.ScaiiPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.ScaiiPacket;
  return proto.scaii.common.ScaiiPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.ScaiiPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.ScaiiPacket}
 */
proto.scaii.common.ScaiiPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.State;
      reader.readMessage(value,proto.scaii.common.State.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.scaii.common.Action;
      reader.readMessage(value,proto.scaii.common.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.scaii.common.Viz;
      reader.readMessage(value,proto.scaii.common.Viz.deserializeBinaryFromReader);
      msg.setViz(value);
      break;
    case 4:
      var value = new proto.scaii.common.Error;
      reader.readMessage(value,proto.scaii.common.Error.deserializeBinaryFromReader);
      msg.setErr(value);
      break;
    case 5:
      var value = new proto.scaii.common.Cfg;
      reader.readMessage(value,proto.scaii.common.Cfg.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 6:
      var value = new proto.scaii.common.SupportedBehavior;
      reader.readMessage(value,proto.scaii.common.SupportedBehavior.deserializeBinaryFromReader);
      msg.setSupported(value);
      break;
    case 7:
      var value = new proto.scaii.common.SerializationRequest;
      reader.readMessage(value,proto.scaii.common.SerializationRequest.deserializeBinaryFromReader);
      msg.setSerReq(value);
      break;
    case 8:
      var value = new proto.scaii.common.SerializationResponse;
      reader.readMessage(value,proto.scaii.common.SerializationResponse.deserializeBinaryFromReader);
      msg.setSerResp(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetEnv(value);
      break;
    case 10:
      var value = new proto.scaii.common.VizInit;
      reader.readMessage(value,proto.scaii.common.VizInit.deserializeBinaryFromReader);
      msg.setVizInit(value);
      break;
    case 29:
      var value = new proto.scaii.common.Other;
      reader.readMessage(value,proto.scaii.common.Other.deserializeBinaryFromReader);
      msg.setOther(value);
      break;
    case 31:
      var value = new proto.scaii.common.Endpoint;
      reader.readMessage(value,proto.scaii.common.Endpoint.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 30:
      var value = new proto.scaii.common.Endpoint;
      reader.readMessage(value,proto.scaii.common.Endpoint.deserializeBinaryFromReader);
      msg.setDest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.ScaiiPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.ScaiiPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.ScaiiPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ScaiiPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.State.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.Action.serializeBinaryToWriter
    );
  }
  f = message.getViz();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scaii.common.Viz.serializeBinaryToWriter
    );
  }
  f = message.getErr();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.scaii.common.Error.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.scaii.common.Cfg.serializeBinaryToWriter
    );
  }
  f = message.getSupported();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.scaii.common.SupportedBehavior.serializeBinaryToWriter
    );
  }
  f = message.getSerReq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.scaii.common.SerializationRequest.serializeBinaryToWriter
    );
  }
  f = message.getSerResp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.scaii.common.SerializationResponse.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getVizInit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.scaii.common.VizInit.serializeBinaryToWriter
    );
  }
  f = message.getOther();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.scaii.common.Other.serializeBinaryToWriter
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.scaii.common.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getDest();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.scaii.common.Endpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional State state = 1;
 * @return {?proto.scaii.common.State}
 */
proto.scaii.common.ScaiiPacket.prototype.getState = function() {
  return /** @type{?proto.scaii.common.State} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.State, 1));
};


/** @param {?proto.scaii.common.State|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setState = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Action action = 2;
 * @return {?proto.scaii.common.Action}
 */
proto.scaii.common.ScaiiPacket.prototype.getAction = function() {
  return /** @type{?proto.scaii.common.Action} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Action, 2));
};


/** @param {?proto.scaii.common.Action|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Viz viz = 3;
 * @return {?proto.scaii.common.Viz}
 */
proto.scaii.common.ScaiiPacket.prototype.getViz = function() {
  return /** @type{?proto.scaii.common.Viz} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Viz, 3));
};


/** @param {?proto.scaii.common.Viz|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setViz = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearViz = function() {
  this.setViz(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasViz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error err = 4;
 * @return {?proto.scaii.common.Error}
 */
proto.scaii.common.ScaiiPacket.prototype.getErr = function() {
  return /** @type{?proto.scaii.common.Error} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Error, 4));
};


/** @param {?proto.scaii.common.Error|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setErr = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearErr = function() {
  this.setErr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasErr = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Cfg config = 5;
 * @return {?proto.scaii.common.Cfg}
 */
proto.scaii.common.ScaiiPacket.prototype.getConfig = function() {
  return /** @type{?proto.scaii.common.Cfg} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Cfg, 5));
};


/** @param {?proto.scaii.common.Cfg|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SupportedBehavior supported = 6;
 * @return {?proto.scaii.common.SupportedBehavior}
 */
proto.scaii.common.ScaiiPacket.prototype.getSupported = function() {
  return /** @type{?proto.scaii.common.SupportedBehavior} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.SupportedBehavior, 6));
};


/** @param {?proto.scaii.common.SupportedBehavior|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setSupported = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearSupported = function() {
  this.setSupported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasSupported = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SerializationRequest ser_req = 7;
 * @return {?proto.scaii.common.SerializationRequest}
 */
proto.scaii.common.ScaiiPacket.prototype.getSerReq = function() {
  return /** @type{?proto.scaii.common.SerializationRequest} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.SerializationRequest, 7));
};


/** @param {?proto.scaii.common.SerializationRequest|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setSerReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearSerReq = function() {
  this.setSerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasSerReq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SerializationResponse ser_resp = 8;
 * @return {?proto.scaii.common.SerializationResponse}
 */
proto.scaii.common.ScaiiPacket.prototype.getSerResp = function() {
  return /** @type{?proto.scaii.common.SerializationResponse} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.SerializationResponse, 8));
};


/** @param {?proto.scaii.common.SerializationResponse|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setSerResp = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearSerResp = function() {
  this.setSerResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasSerResp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool reset_env = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.getResetEnv = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.scaii.common.ScaiiPacket.prototype.setResetEnv = function(value) {
  jspb.Message.setOneofField(this, 9, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearResetEnv = function() {
  jspb.Message.setOneofField(this, 9, proto.scaii.common.ScaiiPacket.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasResetEnv = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional VizInit viz_init = 10;
 * @return {?proto.scaii.common.VizInit}
 */
proto.scaii.common.ScaiiPacket.prototype.getVizInit = function() {
  return /** @type{?proto.scaii.common.VizInit} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.VizInit, 10));
};


/** @param {?proto.scaii.common.VizInit|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setVizInit = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearVizInit = function() {
  this.setVizInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasVizInit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Other other = 29;
 * @return {?proto.scaii.common.Other}
 */
proto.scaii.common.ScaiiPacket.prototype.getOther = function() {
  return /** @type{?proto.scaii.common.Other} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Other, 29));
};


/** @param {?proto.scaii.common.Other|undefined} value */
proto.scaii.common.ScaiiPacket.prototype.setOther = function(value) {
  jspb.Message.setOneofWrapperField(this, 29, proto.scaii.common.ScaiiPacket.oneofGroups_[0], value);
};


proto.scaii.common.ScaiiPacket.prototype.clearOther = function() {
  this.setOther(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasOther = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * required Endpoint src = 31;
 * @return {!proto.scaii.common.Endpoint}
 */
proto.scaii.common.ScaiiPacket.prototype.getSrc = function() {
  return /** @type{!proto.scaii.common.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Endpoint, 31, 1));
};


/** @param {!proto.scaii.common.Endpoint} value */
proto.scaii.common.ScaiiPacket.prototype.setSrc = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.scaii.common.ScaiiPacket.prototype.clearSrc = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * required Endpoint dest = 30;
 * @return {!proto.scaii.common.Endpoint}
 */
proto.scaii.common.ScaiiPacket.prototype.getDest = function() {
  return /** @type{!proto.scaii.common.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Endpoint, 30, 1));
};


/** @param {!proto.scaii.common.Endpoint} value */
proto.scaii.common.ScaiiPacket.prototype.setDest = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.scaii.common.ScaiiPacket.prototype.clearDest = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ScaiiPacket.prototype.hasDest = function() {
  return jspb.Message.getField(this, 30) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Endpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.Endpoint.oneofGroups_);
};
goog.inherits(proto.scaii.common.Endpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Endpoint.displayName = 'proto.scaii.common.Endpoint';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.Endpoint.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.scaii.common.Endpoint.EndpointCase = {
  ENDPOINT_NOT_SET: 0,
  BACKEND: 1,
  AGENT: 2,
  CORE: 3,
  MODULE: 4
};

/**
 * @return {proto.scaii.common.Endpoint.EndpointCase}
 */
proto.scaii.common.Endpoint.prototype.getEndpointCase = function() {
  return /** @type {proto.scaii.common.Endpoint.EndpointCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.Endpoint.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Endpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Endpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Endpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Endpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    backend: (f = msg.getBackend()) && proto.scaii.common.BackendEndpoint.toObject(includeInstance, f),
    agent: (f = msg.getAgent()) && proto.scaii.common.AgentEndpoint.toObject(includeInstance, f),
    core: (f = msg.getCore()) && proto.scaii.common.CoreEndpoint.toObject(includeInstance, f),
    module: (f = msg.getModule()) && proto.scaii.common.ModuleEndpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Endpoint}
 */
proto.scaii.common.Endpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Endpoint;
  return proto.scaii.common.Endpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Endpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Endpoint}
 */
proto.scaii.common.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.BackendEndpoint;
      reader.readMessage(value,proto.scaii.common.BackendEndpoint.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    case 2:
      var value = new proto.scaii.common.AgentEndpoint;
      reader.readMessage(value,proto.scaii.common.AgentEndpoint.deserializeBinaryFromReader);
      msg.setAgent(value);
      break;
    case 3:
      var value = new proto.scaii.common.CoreEndpoint;
      reader.readMessage(value,proto.scaii.common.CoreEndpoint.deserializeBinaryFromReader);
      msg.setCore(value);
      break;
    case 4:
      var value = new proto.scaii.common.ModuleEndpoint;
      reader.readMessage(value,proto.scaii.common.ModuleEndpoint.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Endpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Endpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Endpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Endpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.BackendEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getAgent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.AgentEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getCore();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scaii.common.CoreEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.scaii.common.ModuleEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional BackendEndpoint backend = 1;
 * @return {?proto.scaii.common.BackendEndpoint}
 */
proto.scaii.common.Endpoint.prototype.getBackend = function() {
  return /** @type{?proto.scaii.common.BackendEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.BackendEndpoint, 1));
};


/** @param {?proto.scaii.common.BackendEndpoint|undefined} value */
proto.scaii.common.Endpoint.prototype.setBackend = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.Endpoint.oneofGroups_[0], value);
};


proto.scaii.common.Endpoint.prototype.clearBackend = function() {
  this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Endpoint.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AgentEndpoint agent = 2;
 * @return {?proto.scaii.common.AgentEndpoint}
 */
proto.scaii.common.Endpoint.prototype.getAgent = function() {
  return /** @type{?proto.scaii.common.AgentEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.AgentEndpoint, 2));
};


/** @param {?proto.scaii.common.AgentEndpoint|undefined} value */
proto.scaii.common.Endpoint.prototype.setAgent = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.scaii.common.Endpoint.oneofGroups_[0], value);
};


proto.scaii.common.Endpoint.prototype.clearAgent = function() {
  this.setAgent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Endpoint.prototype.hasAgent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CoreEndpoint core = 3;
 * @return {?proto.scaii.common.CoreEndpoint}
 */
proto.scaii.common.Endpoint.prototype.getCore = function() {
  return /** @type{?proto.scaii.common.CoreEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.CoreEndpoint, 3));
};


/** @param {?proto.scaii.common.CoreEndpoint|undefined} value */
proto.scaii.common.Endpoint.prototype.setCore = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.scaii.common.Endpoint.oneofGroups_[0], value);
};


proto.scaii.common.Endpoint.prototype.clearCore = function() {
  this.setCore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Endpoint.prototype.hasCore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ModuleEndpoint module = 4;
 * @return {?proto.scaii.common.ModuleEndpoint}
 */
proto.scaii.common.Endpoint.prototype.getModule = function() {
  return /** @type{?proto.scaii.common.ModuleEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.ModuleEndpoint, 4));
};


/** @param {?proto.scaii.common.ModuleEndpoint|undefined} value */
proto.scaii.common.Endpoint.prototype.setModule = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.scaii.common.Endpoint.oneofGroups_[0], value);
};


proto.scaii.common.Endpoint.prototype.clearModule = function() {
  this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Endpoint.prototype.hasModule = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.BackendEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.BackendEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.BackendEndpoint.displayName = 'proto.scaii.common.BackendEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.BackendEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.BackendEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.BackendEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.BackendEndpoint}
 */
proto.scaii.common.BackendEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.BackendEndpoint;
  return proto.scaii.common.BackendEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.BackendEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.BackendEndpoint}
 */
proto.scaii.common.BackendEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.BackendEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.BackendEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.BackendEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.AgentEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.AgentEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.AgentEndpoint.displayName = 'proto.scaii.common.AgentEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.AgentEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.AgentEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.AgentEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.AgentEndpoint}
 */
proto.scaii.common.AgentEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.AgentEndpoint;
  return proto.scaii.common.AgentEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.AgentEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.AgentEndpoint}
 */
proto.scaii.common.AgentEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.AgentEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.AgentEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.AgentEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.CoreEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.CoreEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.CoreEndpoint.displayName = 'proto.scaii.common.CoreEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.CoreEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.CoreEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.CoreEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.CoreEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.CoreEndpoint}
 */
proto.scaii.common.CoreEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.CoreEndpoint;
  return proto.scaii.common.CoreEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.CoreEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.CoreEndpoint}
 */
proto.scaii.common.CoreEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.CoreEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.CoreEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.CoreEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.CoreEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.ModuleEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.ModuleEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.ModuleEndpoint.displayName = 'proto.scaii.common.ModuleEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.ModuleEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.ModuleEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.ModuleEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.ModuleEndpoint}
 */
proto.scaii.common.ModuleEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.ModuleEndpoint;
  return proto.scaii.common.ModuleEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.ModuleEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.ModuleEndpoint}
 */
proto.scaii.common.ModuleEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.ModuleEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.ModuleEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.ModuleEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.scaii.common.ModuleEndpoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scaii.common.ModuleEndpoint.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.ModuleEndpoint.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ModuleEndpoint.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Cfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.Cfg.oneofGroups_);
};
goog.inherits(proto.scaii.common.Cfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Cfg.displayName = 'proto.scaii.common.Cfg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.Cfg.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.scaii.common.Cfg.WhichModuleCase = {
  WHICH_MODULE_NOT_SET: 0,
  CORE_CFG: 1,
  BACKEND_CFG: 2,
  AGENT_CFG: 3,
  MODULE_CFG: 4
};

/**
 * @return {proto.scaii.common.Cfg.WhichModuleCase}
 */
proto.scaii.common.Cfg.prototype.getWhichModuleCase = function() {
  return /** @type {proto.scaii.common.Cfg.WhichModuleCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.Cfg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Cfg.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Cfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Cfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Cfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    coreCfg: (f = msg.getCoreCfg()) && proto.scaii.common.CoreCfg.toObject(includeInstance, f),
    backendCfg: (f = msg.getBackendCfg()) && proto.scaii.common.BackendCfg.toObject(includeInstance, f),
    agentCfg: (f = msg.getAgentCfg()) && proto.scaii.common.AgentCfg.toObject(includeInstance, f),
    moduleCfg: (f = msg.getModuleCfg()) && proto.scaii.common.ModuleCfg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Cfg}
 */
proto.scaii.common.Cfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Cfg;
  return proto.scaii.common.Cfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Cfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Cfg}
 */
proto.scaii.common.Cfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.CoreCfg;
      reader.readMessage(value,proto.scaii.common.CoreCfg.deserializeBinaryFromReader);
      msg.setCoreCfg(value);
      break;
    case 2:
      var value = new proto.scaii.common.BackendCfg;
      reader.readMessage(value,proto.scaii.common.BackendCfg.deserializeBinaryFromReader);
      msg.setBackendCfg(value);
      break;
    case 3:
      var value = new proto.scaii.common.AgentCfg;
      reader.readMessage(value,proto.scaii.common.AgentCfg.deserializeBinaryFromReader);
      msg.setAgentCfg(value);
      break;
    case 4:
      var value = new proto.scaii.common.ModuleCfg;
      reader.readMessage(value,proto.scaii.common.ModuleCfg.deserializeBinaryFromReader);
      msg.setModuleCfg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Cfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Cfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Cfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Cfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoreCfg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.CoreCfg.serializeBinaryToWriter
    );
  }
  f = message.getBackendCfg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.BackendCfg.serializeBinaryToWriter
    );
  }
  f = message.getAgentCfg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scaii.common.AgentCfg.serializeBinaryToWriter
    );
  }
  f = message.getModuleCfg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.scaii.common.ModuleCfg.serializeBinaryToWriter
    );
  }
};


/**
 * optional CoreCfg core_cfg = 1;
 * @return {?proto.scaii.common.CoreCfg}
 */
proto.scaii.common.Cfg.prototype.getCoreCfg = function() {
  return /** @type{?proto.scaii.common.CoreCfg} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.CoreCfg, 1));
};


/** @param {?proto.scaii.common.CoreCfg|undefined} value */
proto.scaii.common.Cfg.prototype.setCoreCfg = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.Cfg.oneofGroups_[0], value);
};


proto.scaii.common.Cfg.prototype.clearCoreCfg = function() {
  this.setCoreCfg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Cfg.prototype.hasCoreCfg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BackendCfg backend_cfg = 2;
 * @return {?proto.scaii.common.BackendCfg}
 */
proto.scaii.common.Cfg.prototype.getBackendCfg = function() {
  return /** @type{?proto.scaii.common.BackendCfg} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.BackendCfg, 2));
};


/** @param {?proto.scaii.common.BackendCfg|undefined} value */
proto.scaii.common.Cfg.prototype.setBackendCfg = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.scaii.common.Cfg.oneofGroups_[0], value);
};


proto.scaii.common.Cfg.prototype.clearBackendCfg = function() {
  this.setBackendCfg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Cfg.prototype.hasBackendCfg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AgentCfg agent_cfg = 3;
 * @return {?proto.scaii.common.AgentCfg}
 */
proto.scaii.common.Cfg.prototype.getAgentCfg = function() {
  return /** @type{?proto.scaii.common.AgentCfg} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.AgentCfg, 3));
};


/** @param {?proto.scaii.common.AgentCfg|undefined} value */
proto.scaii.common.Cfg.prototype.setAgentCfg = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.scaii.common.Cfg.oneofGroups_[0], value);
};


proto.scaii.common.Cfg.prototype.clearAgentCfg = function() {
  this.setAgentCfg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Cfg.prototype.hasAgentCfg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ModuleCfg module_cfg = 4;
 * @return {?proto.scaii.common.ModuleCfg}
 */
proto.scaii.common.Cfg.prototype.getModuleCfg = function() {
  return /** @type{?proto.scaii.common.ModuleCfg} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.ModuleCfg, 4));
};


/** @param {?proto.scaii.common.ModuleCfg|undefined} value */
proto.scaii.common.Cfg.prototype.setModuleCfg = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.scaii.common.Cfg.oneofGroups_[0], value);
};


proto.scaii.common.Cfg.prototype.clearModuleCfg = function() {
  this.setModuleCfg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Cfg.prototype.hasModuleCfg = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.PluginType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.PluginType.oneofGroups_);
};
goog.inherits(proto.scaii.common.PluginType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.PluginType.displayName = 'proto.scaii.common.PluginType';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.PluginType.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.scaii.common.PluginType.PluginTypeCase = {
  PLUGIN_TYPE_NOT_SET: 0,
  RUST_PLUGIN: 1
};

/**
 * @return {proto.scaii.common.PluginType.PluginTypeCase}
 */
proto.scaii.common.PluginType.prototype.getPluginTypeCase = function() {
  return /** @type {proto.scaii.common.PluginType.PluginTypeCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.PluginType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.PluginType.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.PluginType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.PluginType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.PluginType.toObject = function(includeInstance, msg) {
  var f, obj = {
    rustPlugin: (f = msg.getRustPlugin()) && proto.scaii.common.RustFFIConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.PluginType}
 */
proto.scaii.common.PluginType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.PluginType;
  return proto.scaii.common.PluginType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.PluginType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.PluginType}
 */
proto.scaii.common.PluginType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.RustFFIConfig;
      reader.readMessage(value,proto.scaii.common.RustFFIConfig.deserializeBinaryFromReader);
      msg.setRustPlugin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.PluginType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.PluginType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.PluginType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.PluginType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRustPlugin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.RustFFIConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional RustFFIConfig rust_plugin = 1;
 * @return {?proto.scaii.common.RustFFIConfig}
 */
proto.scaii.common.PluginType.prototype.getRustPlugin = function() {
  return /** @type{?proto.scaii.common.RustFFIConfig} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.RustFFIConfig, 1));
};


/** @param {?proto.scaii.common.RustFFIConfig|undefined} value */
proto.scaii.common.PluginType.prototype.setRustPlugin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.PluginType.oneofGroups_[0], value);
};


proto.scaii.common.PluginType.prototype.clearRustPlugin = function() {
  this.setRustPlugin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.PluginType.prototype.hasRustPlugin = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.CoreCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.CoreCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.CoreCfg.displayName = 'proto.scaii.common.CoreCfg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.CoreCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.CoreCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.CoreCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.CoreCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginType: (f = msg.getPluginType()) && proto.scaii.common.PluginType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.CoreCfg}
 */
proto.scaii.common.CoreCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.CoreCfg;
  return proto.scaii.common.CoreCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.CoreCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.CoreCfg}
 */
proto.scaii.common.CoreCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.PluginType;
      reader.readMessage(value,proto.scaii.common.PluginType.deserializeBinaryFromReader);
      msg.setPluginType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.CoreCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.CoreCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.CoreCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.CoreCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.PluginType.serializeBinaryToWriter
    );
  }
};


/**
 * required PluginType plugin_type = 1;
 * @return {!proto.scaii.common.PluginType}
 */
proto.scaii.common.CoreCfg.prototype.getPluginType = function() {
  return /** @type{!proto.scaii.common.PluginType} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.PluginType, 1, 1));
};


/** @param {!proto.scaii.common.PluginType} value */
proto.scaii.common.CoreCfg.prototype.setPluginType = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.scaii.common.CoreCfg.prototype.clearPluginType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.CoreCfg.prototype.hasPluginType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.BackendInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.BackendInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.BackendInit.displayName = 'proto.scaii.common.BackendInit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.BackendInit.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.BackendInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.BackendInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendInit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.BackendInit}
 */
proto.scaii.common.BackendInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.BackendInit;
  return proto.scaii.common.BackendInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.BackendInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.BackendInit}
 */
proto.scaii.common.BackendInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.BackendInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.BackendInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.BackendInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.ModuleInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.ModuleInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.ModuleInit.displayName = 'proto.scaii.common.ModuleInit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.ModuleInit.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.ModuleInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.ModuleInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.ModuleInit}
 */
proto.scaii.common.ModuleInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.ModuleInit;
  return proto.scaii.common.ModuleInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.ModuleInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.ModuleInit}
 */
proto.scaii.common.ModuleInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.ModuleInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.ModuleInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.ModuleInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.scaii.common.ModuleInit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scaii.common.ModuleInit.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.ModuleInit.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.ModuleInit.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.InitAs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.InitAs.oneofGroups_);
};
goog.inherits(proto.scaii.common.InitAs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.InitAs.displayName = 'proto.scaii.common.InitAs';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.InitAs.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.scaii.common.InitAs.InitAsCase = {
  INIT_AS_NOT_SET: 0,
  BACKEND: 1,
  MODULE: 2
};

/**
 * @return {proto.scaii.common.InitAs.InitAsCase}
 */
proto.scaii.common.InitAs.prototype.getInitAsCase = function() {
  return /** @type {proto.scaii.common.InitAs.InitAsCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.InitAs.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.InitAs.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.InitAs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.InitAs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.InitAs.toObject = function(includeInstance, msg) {
  var f, obj = {
    backend: (f = msg.getBackend()) && proto.scaii.common.BackendInit.toObject(includeInstance, f),
    module: (f = msg.getModule()) && proto.scaii.common.ModuleInit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.InitAs}
 */
proto.scaii.common.InitAs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.InitAs;
  return proto.scaii.common.InitAs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.InitAs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.InitAs}
 */
proto.scaii.common.InitAs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.BackendInit;
      reader.readMessage(value,proto.scaii.common.BackendInit.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    case 2:
      var value = new proto.scaii.common.ModuleInit;
      reader.readMessage(value,proto.scaii.common.ModuleInit.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.InitAs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.InitAs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.InitAs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.InitAs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.BackendInit.serializeBinaryToWriter
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.ModuleInit.serializeBinaryToWriter
    );
  }
};


/**
 * optional BackendInit backend = 1;
 * @return {?proto.scaii.common.BackendInit}
 */
proto.scaii.common.InitAs.prototype.getBackend = function() {
  return /** @type{?proto.scaii.common.BackendInit} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.BackendInit, 1));
};


/** @param {?proto.scaii.common.BackendInit|undefined} value */
proto.scaii.common.InitAs.prototype.setBackend = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.InitAs.oneofGroups_[0], value);
};


proto.scaii.common.InitAs.prototype.clearBackend = function() {
  this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.InitAs.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ModuleInit module = 2;
 * @return {?proto.scaii.common.ModuleInit}
 */
proto.scaii.common.InitAs.prototype.getModule = function() {
  return /** @type{?proto.scaii.common.ModuleInit} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.ModuleInit, 2));
};


/** @param {?proto.scaii.common.ModuleInit|undefined} value */
proto.scaii.common.InitAs.prototype.setModule = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.scaii.common.InitAs.oneofGroups_[0], value);
};


proto.scaii.common.InitAs.prototype.clearModule = function() {
  this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.InitAs.prototype.hasModule = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.RustFFIConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.RustFFIConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.RustFFIConfig.displayName = 'proto.scaii.common.RustFFIConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.RustFFIConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.RustFFIConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.RustFFIConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.RustFFIConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginPath: jspb.Message.getField(msg, 1),
    initAs: (f = msg.getInitAs()) && proto.scaii.common.InitAs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.RustFFIConfig}
 */
proto.scaii.common.RustFFIConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.RustFFIConfig;
  return proto.scaii.common.RustFFIConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.RustFFIConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.RustFFIConfig}
 */
proto.scaii.common.RustFFIConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginPath(value);
      break;
    case 2:
      var value = new proto.scaii.common.InitAs;
      reader.readMessage(value,proto.scaii.common.InitAs.deserializeBinaryFromReader);
      msg.setInitAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.RustFFIConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.RustFFIConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.RustFFIConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.RustFFIConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitAs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.InitAs.serializeBinaryToWriter
    );
  }
};


/**
 * required string plugin_path = 1;
 * @return {string}
 */
proto.scaii.common.RustFFIConfig.prototype.getPluginPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scaii.common.RustFFIConfig.prototype.setPluginPath = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.RustFFIConfig.prototype.clearPluginPath = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.RustFFIConfig.prototype.hasPluginPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InitAs init_as = 2;
 * @return {!proto.scaii.common.InitAs}
 */
proto.scaii.common.RustFFIConfig.prototype.getInitAs = function() {
  return /** @type{!proto.scaii.common.InitAs} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.InitAs, 2, 1));
};


/** @param {!proto.scaii.common.InitAs} value */
proto.scaii.common.RustFFIConfig.prototype.setInitAs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scaii.common.RustFFIConfig.prototype.clearInitAs = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.RustFFIConfig.prototype.hasInitAs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.BackendCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.scaii.common.BackendCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.BackendCfg.displayName = 'proto.scaii.common.BackendCfg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.BackendCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.BackendCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.BackendCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendCfg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.BackendCfg.extensions, proto.scaii.common.BackendCfg.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.BackendCfg}
 */
proto.scaii.common.BackendCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.BackendCfg;
  return proto.scaii.common.BackendCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.BackendCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.BackendCfg}
 */
proto.scaii.common.BackendCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.BackendCfg.extensionsBinary,
        proto.scaii.common.BackendCfg.prototype.getExtension,
        proto.scaii.common.BackendCfg.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.BackendCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.BackendCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.BackendCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.BackendCfg.extensionsBinary, proto.scaii.common.BackendCfg.prototype.getExtension);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.BackendCfg.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.BackendCfg.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.AgentCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.scaii.common.AgentCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.AgentCfg.displayName = 'proto.scaii.common.AgentCfg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.AgentCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.AgentCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.AgentCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentCfg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.AgentCfg.extensions, proto.scaii.common.AgentCfg.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.AgentCfg}
 */
proto.scaii.common.AgentCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.AgentCfg;
  return proto.scaii.common.AgentCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.AgentCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.AgentCfg}
 */
proto.scaii.common.AgentCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.AgentCfg.extensionsBinary,
        proto.scaii.common.AgentCfg.prototype.getExtension,
        proto.scaii.common.AgentCfg.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.AgentCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.AgentCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.AgentCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.AgentCfg.extensionsBinary, proto.scaii.common.AgentCfg.prototype.getExtension);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.AgentCfg.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.AgentCfg.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.ModuleCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.scaii.common.ModuleCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.ModuleCfg.displayName = 'proto.scaii.common.ModuleCfg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.ModuleCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.ModuleCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.ModuleCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleCfg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.ModuleCfg.extensions, proto.scaii.common.ModuleCfg.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.ModuleCfg}
 */
proto.scaii.common.ModuleCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.ModuleCfg;
  return proto.scaii.common.ModuleCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.ModuleCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.ModuleCfg}
 */
proto.scaii.common.ModuleCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.ModuleCfg.extensionsBinary,
        proto.scaii.common.ModuleCfg.prototype.getExtension,
        proto.scaii.common.ModuleCfg.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.ModuleCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.ModuleCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.ModuleCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.ModuleCfg.extensionsBinary, proto.scaii.common.ModuleCfg.prototype.getExtension);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.ModuleCfg.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.ModuleCfg.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.SupportedBehavior = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scaii.common.SupportedBehavior.oneofGroups_);
};
goog.inherits(proto.scaii.common.SupportedBehavior, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.SupportedBehavior.displayName = 'proto.scaii.common.SupportedBehavior';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scaii.common.SupportedBehavior.oneofGroups_ = [[1,2,5]];

/**
 * @enum {number}
 */
proto.scaii.common.SupportedBehavior.WhichModuleCase = {
  WHICH_MODULE_NOT_SET: 0,
  BACKEND: 1,
  AGENT: 2,
  GENERIC_MODULE: 5
};

/**
 * @return {proto.scaii.common.SupportedBehavior.WhichModuleCase}
 */
proto.scaii.common.SupportedBehavior.prototype.getWhichModuleCase = function() {
  return /** @type {proto.scaii.common.SupportedBehavior.WhichModuleCase} */(jspb.Message.computeOneofCase(this, proto.scaii.common.SupportedBehavior.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.SupportedBehavior.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.SupportedBehavior.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.SupportedBehavior} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SupportedBehavior.toObject = function(includeInstance, msg) {
  var f, obj = {
    backend: (f = msg.getBackend()) && proto.scaii.common.BackendSupported.toObject(includeInstance, f),
    agent: (f = msg.getAgent()) && proto.scaii.common.AgentSupported.toObject(includeInstance, f),
    genericModule: (f = msg.getGenericModule()) && proto.scaii.common.ModuleSupported.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.SupportedBehavior}
 */
proto.scaii.common.SupportedBehavior.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.SupportedBehavior;
  return proto.scaii.common.SupportedBehavior.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.SupportedBehavior} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.SupportedBehavior}
 */
proto.scaii.common.SupportedBehavior.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.BackendSupported;
      reader.readMessage(value,proto.scaii.common.BackendSupported.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    case 2:
      var value = new proto.scaii.common.AgentSupported;
      reader.readMessage(value,proto.scaii.common.AgentSupported.deserializeBinaryFromReader);
      msg.setAgent(value);
      break;
    case 5:
      var value = new proto.scaii.common.ModuleSupported;
      reader.readMessage(value,proto.scaii.common.ModuleSupported.deserializeBinaryFromReader);
      msg.setGenericModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.SupportedBehavior.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.SupportedBehavior.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.SupportedBehavior} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SupportedBehavior.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scaii.common.BackendSupported.serializeBinaryToWriter
    );
  }
  f = message.getAgent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.AgentSupported.serializeBinaryToWriter
    );
  }
  f = message.getGenericModule();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.scaii.common.ModuleSupported.serializeBinaryToWriter
    );
  }
};


/**
 * optional BackendSupported backend = 1;
 * @return {?proto.scaii.common.BackendSupported}
 */
proto.scaii.common.SupportedBehavior.prototype.getBackend = function() {
  return /** @type{?proto.scaii.common.BackendSupported} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.BackendSupported, 1));
};


/** @param {?proto.scaii.common.BackendSupported|undefined} value */
proto.scaii.common.SupportedBehavior.prototype.setBackend = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.scaii.common.SupportedBehavior.oneofGroups_[0], value);
};


proto.scaii.common.SupportedBehavior.prototype.clearBackend = function() {
  this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SupportedBehavior.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AgentSupported agent = 2;
 * @return {?proto.scaii.common.AgentSupported}
 */
proto.scaii.common.SupportedBehavior.prototype.getAgent = function() {
  return /** @type{?proto.scaii.common.AgentSupported} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.AgentSupported, 2));
};


/** @param {?proto.scaii.common.AgentSupported|undefined} value */
proto.scaii.common.SupportedBehavior.prototype.setAgent = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.scaii.common.SupportedBehavior.oneofGroups_[0], value);
};


proto.scaii.common.SupportedBehavior.prototype.clearAgent = function() {
  this.setAgent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SupportedBehavior.prototype.hasAgent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModuleSupported generic_module = 5;
 * @return {?proto.scaii.common.ModuleSupported}
 */
proto.scaii.common.SupportedBehavior.prototype.getGenericModule = function() {
  return /** @type{?proto.scaii.common.ModuleSupported} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.ModuleSupported, 5));
};


/** @param {?proto.scaii.common.ModuleSupported|undefined} value */
proto.scaii.common.SupportedBehavior.prototype.setGenericModule = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.scaii.common.SupportedBehavior.oneofGroups_[0], value);
};


proto.scaii.common.SupportedBehavior.prototype.clearGenericModule = function() {
  this.setGenericModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SupportedBehavior.prototype.hasGenericModule = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.BackendSupported = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.scaii.common.BackendSupported, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.BackendSupported.displayName = 'proto.scaii.common.BackendSupported';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.BackendSupported.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.BackendSupported.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.BackendSupported} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendSupported.toObject = function(includeInstance, msg) {
  var f, obj = {
    serializationSupport: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.BackendSupported.extensions, proto.scaii.common.BackendSupported.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.BackendSupported}
 */
proto.scaii.common.BackendSupported.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.BackendSupported;
  return proto.scaii.common.BackendSupported.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.BackendSupported} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.BackendSupported}
 */
proto.scaii.common.BackendSupported.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.scaii.common.BackendSupported.SerializationSupport} */ (reader.readEnum());
      msg.setSerializationSupport(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.BackendSupported.extensionsBinary,
        proto.scaii.common.BackendSupported.prototype.getExtension,
        proto.scaii.common.BackendSupported.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.BackendSupported.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.BackendSupported.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.BackendSupported} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.BackendSupported.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.scaii.common.BackendSupported.SerializationSupport} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.BackendSupported.extensionsBinary, proto.scaii.common.BackendSupported.prototype.getExtension);
};


/**
 * @enum {number}
 */
proto.scaii.common.BackendSupported.SerializationSupport = {
  NONE: 0,
  DIVERGING_ONLY: 1,
  NONDIVERGING_ONLY: 2,
  FULL: 3
};

/**
 * required SerializationSupport serialization_support = 1;
 * @return {!proto.scaii.common.BackendSupported.SerializationSupport}
 */
proto.scaii.common.BackendSupported.prototype.getSerializationSupport = function() {
  return /** @type {!proto.scaii.common.BackendSupported.SerializationSupport} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.scaii.common.BackendSupported.SerializationSupport} value */
proto.scaii.common.BackendSupported.prototype.setSerializationSupport = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.BackendSupported.prototype.clearSerializationSupport = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.BackendSupported.prototype.hasSerializationSupport = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.BackendSupported.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.BackendSupported.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.AgentSupported = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.scaii.common.AgentSupported, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.AgentSupported.displayName = 'proto.scaii.common.AgentSupported';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.AgentSupported.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.AgentSupported.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.AgentSupported} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentSupported.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.AgentSupported.extensions, proto.scaii.common.AgentSupported.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.AgentSupported}
 */
proto.scaii.common.AgentSupported.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.AgentSupported;
  return proto.scaii.common.AgentSupported.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.AgentSupported} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.AgentSupported}
 */
proto.scaii.common.AgentSupported.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.AgentSupported.extensionsBinary,
        proto.scaii.common.AgentSupported.prototype.getExtension,
        proto.scaii.common.AgentSupported.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.AgentSupported.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.AgentSupported.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.AgentSupported} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.AgentSupported.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.AgentSupported.extensionsBinary, proto.scaii.common.AgentSupported.prototype.getExtension);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.AgentSupported.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.AgentSupported.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.ModuleSupported = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.scaii.common.ModuleSupported, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.ModuleSupported.displayName = 'proto.scaii.common.ModuleSupported';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.ModuleSupported.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.ModuleSupported.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.ModuleSupported} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleSupported.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.ModuleSupported.extensions, proto.scaii.common.ModuleSupported.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.ModuleSupported}
 */
proto.scaii.common.ModuleSupported.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.ModuleSupported;
  return proto.scaii.common.ModuleSupported.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.ModuleSupported} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.ModuleSupported}
 */
proto.scaii.common.ModuleSupported.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.ModuleSupported.extensionsBinary,
        proto.scaii.common.ModuleSupported.prototype.getExtension,
        proto.scaii.common.ModuleSupported.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.ModuleSupported.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.ModuleSupported.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.ModuleSupported} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.ModuleSupported.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.ModuleSupported.extensionsBinary, proto.scaii.common.ModuleSupported.prototype.getExtension);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.ModuleSupported.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.ModuleSupported.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, proto.scaii.common.State.repeatedFields_, null);
};
goog.inherits(proto.scaii.common.State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.State.displayName = 'proto.scaii.common.State';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scaii.common.State.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.State.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.State.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    featureArrayDimsList: jspb.Message.getRepeatedField(msg, 2),
    reward: jspb.Message.getOptionalFloatingPointField(msg, 3)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.State.extensions, proto.scaii.common.State.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.State}
 */
proto.scaii.common.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.State;
  return proto.scaii.common.State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.State}
 */
proto.scaii.common.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.addFeatures(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addFeatureArrayDims(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReward(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.State.extensionsBinary,
        proto.scaii.common.State.prototype.getExtension,
        proto.scaii.common.State.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      1,
      f
    );
  }
  f = message.getFeatureArrayDimsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.State.extensionsBinary, proto.scaii.common.State.prototype.getExtension);
};


/**
 * repeated double features = 1;
 * @return {!Array.<number>}
 */
proto.scaii.common.State.prototype.getFeaturesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.scaii.common.State.prototype.setFeaturesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.scaii.common.State.prototype.addFeatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.scaii.common.State.prototype.clearFeaturesList = function() {
  this.setFeaturesList([]);
};


/**
 * repeated uint32 feature_array_dims = 2;
 * @return {!Array.<number>}
 */
proto.scaii.common.State.prototype.getFeatureArrayDimsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.scaii.common.State.prototype.setFeatureArrayDimsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.scaii.common.State.prototype.addFeatureArrayDims = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.scaii.common.State.prototype.clearFeatureArrayDimsList = function() {
  this.setFeatureArrayDimsList([]);
};


/**
 * optional double reward = 3;
 * @return {number}
 */
proto.scaii.common.State.prototype.getReward = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.scaii.common.State.prototype.setReward = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.scaii.common.State.prototype.clearReward = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.State.prototype.hasReward = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.State.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.State.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, proto.scaii.common.Action.repeatedFields_, null);
};
goog.inherits(proto.scaii.common.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Action.displayName = 'proto.scaii.common.Action';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scaii.common.Action.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    discreteActionsList: jspb.Message.getRepeatedField(msg, 1),
    continuousActionsList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.Action.extensions, proto.scaii.common.Action.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Action}
 */
proto.scaii.common.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Action;
  return proto.scaii.common.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Action}
 */
proto.scaii.common.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDiscreteActions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.addContinuousActions(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.Action.extensionsBinary,
        proto.scaii.common.Action.prototype.getExtension,
        proto.scaii.common.Action.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscreteActionsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = message.getContinuousActionsList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.Action.extensionsBinary, proto.scaii.common.Action.prototype.getExtension);
};


/**
 * repeated int32 discrete_actions = 1;
 * @return {!Array.<number>}
 */
proto.scaii.common.Action.prototype.getDiscreteActionsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.scaii.common.Action.prototype.setDiscreteActionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.scaii.common.Action.prototype.addDiscreteActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.scaii.common.Action.prototype.clearDiscreteActionsList = function() {
  this.setDiscreteActionsList([]);
};


/**
 * repeated double continuous_actions = 2;
 * @return {!Array.<number>}
 */
proto.scaii.common.Action.prototype.getContinuousActionsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.scaii.common.Action.prototype.setContinuousActionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.scaii.common.Action.prototype.addContinuousActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.scaii.common.Action.prototype.clearContinuousActionsList = function() {
  this.setContinuousActionsList([]);
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.Action.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.Action.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, null, null);
};
goog.inherits(proto.scaii.common.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Error.displayName = 'proto.scaii.common.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getField(msg, 1),
    fatal: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.Error.extensions, proto.scaii.common.Error.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Error}
 */
proto.scaii.common.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Error;
  return proto.scaii.common.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Error}
 */
proto.scaii.common.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFatal(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.Error.extensionsBinary,
        proto.scaii.common.Error.prototype.getExtension,
        proto.scaii.common.Error.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.Error.extensionsBinary, proto.scaii.common.Error.prototype.getExtension);
};


/**
 * required string description = 1;
 * @return {string}
 */
proto.scaii.common.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scaii.common.Error.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Error.prototype.clearDescription = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Error.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool fatal = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scaii.common.Error.prototype.getFatal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.scaii.common.Error.prototype.setFatal = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.scaii.common.Error.prototype.clearFatal = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Error.prototype.hasFatal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.Error.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.Error.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Other = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.scaii.common.Other, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Other.displayName = 'proto.scaii.common.Other';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Other.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Other.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Other} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Other.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.scaii.common.Other.extensions, proto.scaii.common.Other.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Other}
 */
proto.scaii.common.Other.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Other;
  return proto.scaii.common.Other.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Other} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Other}
 */
proto.scaii.common.Other.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.scaii.common.Other.extensionsBinary,
        proto.scaii.common.Other.prototype.getExtension,
        proto.scaii.common.Other.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Other.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Other.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Other} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Other.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.scaii.common.Other.extensionsBinary, proto.scaii.common.Other.prototype.getExtension);
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.scaii.common.Other.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scaii.common.Other.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Other.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Other.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.scaii.common.Other.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.scaii.common.Other.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.SerializationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.SerializationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.SerializationRequest.displayName = 'proto.scaii.common.SerializationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.SerializationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.SerializationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.SerializationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SerializationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.SerializationRequest}
 */
proto.scaii.common.SerializationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.SerializationRequest;
  return proto.scaii.common.SerializationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.SerializationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.SerializationRequest}
 */
proto.scaii.common.SerializationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.scaii.common.SerializationFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.SerializationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.SerializationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.SerializationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SerializationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.scaii.common.SerializationFormat} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required SerializationFormat format = 1;
 * @return {!proto.scaii.common.SerializationFormat}
 */
proto.scaii.common.SerializationRequest.prototype.getFormat = function() {
  return /** @type {!proto.scaii.common.SerializationFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.scaii.common.SerializationFormat} value */
proto.scaii.common.SerializationRequest.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.SerializationRequest.prototype.clearFormat = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SerializationRequest.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.SerializationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.SerializationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.SerializationResponse.displayName = 'proto.scaii.common.SerializationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.SerializationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.SerializationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.SerializationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SerializationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialized: msg.getSerialized_asB64(),
    format: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.SerializationResponse}
 */
proto.scaii.common.SerializationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.SerializationResponse;
  return proto.scaii.common.SerializationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.SerializationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.SerializationResponse}
 */
proto.scaii.common.SerializationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerialized(value);
      break;
    case 2:
      var value = /** @type {!proto.scaii.common.SerializationFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.SerializationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.SerializationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.SerializationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.SerializationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!proto.scaii.common.SerializationFormat} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required bytes serialized = 1;
 * @return {!(string|Uint8Array)}
 */
proto.scaii.common.SerializationResponse.prototype.getSerialized = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes serialized = 1;
 * This is a type-conversion wrapper around `getSerialized()`
 * @return {string}
 */
proto.scaii.common.SerializationResponse.prototype.getSerialized_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerialized()));
};


/**
 * required bytes serialized = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerialized()`
 * @return {!Uint8Array}
 */
proto.scaii.common.SerializationResponse.prototype.getSerialized_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerialized()));
};


/** @param {!(string|Uint8Array)} value */
proto.scaii.common.SerializationResponse.prototype.setSerialized = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.SerializationResponse.prototype.clearSerialized = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SerializationResponse.prototype.hasSerialized = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SerializationFormat format = 2;
 * @return {!proto.scaii.common.SerializationFormat}
 */
proto.scaii.common.SerializationResponse.prototype.getFormat = function() {
  return /** @type {!proto.scaii.common.SerializationFormat} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.scaii.common.SerializationFormat} value */
proto.scaii.common.SerializationResponse.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.scaii.common.SerializationResponse.prototype.clearFormat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.SerializationResponse.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.VizInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.VizInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.VizInit.displayName = 'proto.scaii.common.VizInit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.VizInit.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.VizInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.VizInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.VizInit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.VizInit}
 */
proto.scaii.common.VizInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.VizInit;
  return proto.scaii.common.VizInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.VizInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.VizInit}
 */
proto.scaii.common.VizInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.VizInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.VizInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.VizInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.VizInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Viz = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scaii.common.Viz.repeatedFields_, null);
};
goog.inherits(proto.scaii.common.Viz, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Viz.displayName = 'proto.scaii.common.Viz';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scaii.common.Viz.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Viz.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Viz.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Viz} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Viz.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.scaii.common.Entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Viz}
 */
proto.scaii.common.Viz.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Viz;
  return proto.scaii.common.Viz.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Viz} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Viz}
 */
proto.scaii.common.Viz.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scaii.common.Entity;
      reader.readMessage(value,proto.scaii.common.Entity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Viz.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Viz.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Viz} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Viz.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scaii.common.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Entity entities = 1;
 * @return {!Array.<!proto.scaii.common.Entity>}
 */
proto.scaii.common.Viz.prototype.getEntitiesList = function() {
  return /** @type{!Array.<!proto.scaii.common.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scaii.common.Entity, 1));
};


/** @param {!Array.<!proto.scaii.common.Entity>} value */
proto.scaii.common.Viz.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scaii.common.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scaii.common.Entity}
 */
proto.scaii.common.Viz.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scaii.common.Entity, opt_index);
};


proto.scaii.common.Viz.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scaii.common.Entity.repeatedFields_, null);
};
goog.inherits(proto.scaii.common.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Entity.displayName = 'proto.scaii.common.Entity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scaii.common.Entity.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    pos: (f = msg.getPos()) && proto.scaii.common.Pos.toObject(includeInstance, f),
    shapesList: jspb.Message.toObjectList(msg.getShapesList(),
    proto.scaii.common.Shape.toObject, includeInstance),
    pb_delete: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Entity}
 */
proto.scaii.common.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Entity;
  return proto.scaii.common.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Entity}
 */
proto.scaii.common.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.scaii.common.Pos;
      reader.readMessage(value,proto.scaii.common.Pos.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 3:
      var value = new proto.scaii.common.Shape;
      reader.readMessage(value,proto.scaii.common.Shape.deserializeBinaryFromReader);
      msg.addShapes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.Pos.serializeBinaryToWriter
    );
  }
  f = message.getShapesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scaii.common.Shape.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required uint64 id = 1;
 * @return {number}
 */
proto.scaii.common.Entity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scaii.common.Entity.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Entity.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Entity.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pos pos = 2;
 * @return {?proto.scaii.common.Pos}
 */
proto.scaii.common.Entity.prototype.getPos = function() {
  return /** @type{?proto.scaii.common.Pos} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Pos, 2));
};


/** @param {?proto.scaii.common.Pos|undefined} value */
proto.scaii.common.Entity.prototype.setPos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scaii.common.Entity.prototype.clearPos = function() {
  this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Entity.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Shape shapes = 3;
 * @return {!Array.<!proto.scaii.common.Shape>}
 */
proto.scaii.common.Entity.prototype.getShapesList = function() {
  return /** @type{!Array.<!proto.scaii.common.Shape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scaii.common.Shape, 3));
};


/** @param {!Array.<!proto.scaii.common.Shape>} value */
proto.scaii.common.Entity.prototype.setShapesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scaii.common.Shape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scaii.common.Shape}
 */
proto.scaii.common.Entity.prototype.addShapes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scaii.common.Shape, opt_index);
};


proto.scaii.common.Entity.prototype.clearShapesList = function() {
  this.setShapesList([]);
};


/**
 * required bool delete = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scaii.common.Entity.prototype.getDelete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scaii.common.Entity.prototype.setDelete = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.scaii.common.Entity.prototype.clearDelete = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Entity.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Pos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.Pos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Pos.displayName = 'proto.scaii.common.Pos';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Pos.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Pos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Pos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Pos.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getOptionalFloatingPointField(msg, 1),
    y: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Pos}
 */
proto.scaii.common.Pos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Pos;
  return proto.scaii.common.Pos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Pos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Pos}
 */
proto.scaii.common.Pos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Pos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Pos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Pos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Pos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.scaii.common.Pos.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.scaii.common.Pos.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Pos.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Pos.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.scaii.common.Pos.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.scaii.common.Pos.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.scaii.common.Pos.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Pos.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Color.displayName = 'proto.scaii.common.Color';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: jspb.Message.getField(msg, 1),
    g: jspb.Message.getField(msg, 2),
    b: jspb.Message.getField(msg, 3),
    a: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Color}
 */
proto.scaii.common.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Color;
  return proto.scaii.common.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Color}
 */
proto.scaii.common.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setB(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 r = 1;
 * @return {number}
 */
proto.scaii.common.Color.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scaii.common.Color.prototype.setR = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Color.prototype.clearR = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Color.prototype.hasR = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 g = 2;
 * @return {number}
 */
proto.scaii.common.Color.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.scaii.common.Color.prototype.setG = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.scaii.common.Color.prototype.clearG = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Color.prototype.hasG = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 b = 3;
 * @return {number}
 */
proto.scaii.common.Color.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.scaii.common.Color.prototype.setB = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.scaii.common.Color.prototype.clearB = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Color.prototype.hasB = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 a = 4;
 * @return {number}
 */
proto.scaii.common.Color.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.scaii.common.Color.prototype.setA = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.scaii.common.Color.prototype.clearA = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Color.prototype.hasA = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Triangle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.Triangle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Triangle.displayName = 'proto.scaii.common.Triangle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Triangle.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Triangle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Triangle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Triangle.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseLen: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Triangle}
 */
proto.scaii.common.Triangle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Triangle;
  return proto.scaii.common.Triangle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Triangle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Triangle}
 */
proto.scaii.common.Triangle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Triangle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Triangle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Triangle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Triangle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double base_len = 1;
 * @return {number}
 */
proto.scaii.common.Triangle.prototype.getBaseLen = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.scaii.common.Triangle.prototype.setBaseLen = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Triangle.prototype.clearBaseLen = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Triangle.prototype.hasBaseLen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Rect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.Rect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Rect.displayName = 'proto.scaii.common.Rect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Rect.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Rect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Rect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Rect.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getOptionalFloatingPointField(msg, 1),
    height: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Rect}
 */
proto.scaii.common.Rect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Rect;
  return proto.scaii.common.Rect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Rect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Rect}
 */
proto.scaii.common.Rect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Rect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Rect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Rect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Rect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double width = 1;
 * @return {number}
 */
proto.scaii.common.Rect.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.scaii.common.Rect.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Rect.prototype.clearWidth = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Rect.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double height = 2;
 * @return {number}
 */
proto.scaii.common.Rect.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.scaii.common.Rect.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.scaii.common.Rect.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Rect.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scaii.common.Shape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scaii.common.Shape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scaii.common.Shape.displayName = 'proto.scaii.common.Shape';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scaii.common.Shape.prototype.toObject = function(opt_includeInstance) {
  return proto.scaii.common.Shape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scaii.common.Shape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Shape.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    relativePos: (f = msg.getRelativePos()) && proto.scaii.common.Pos.toObject(includeInstance, f),
    color: (f = msg.getColor()) && proto.scaii.common.Color.toObject(includeInstance, f),
    rect: (f = msg.getRect()) && proto.scaii.common.Rect.toObject(includeInstance, f),
    triangle: (f = msg.getTriangle()) && proto.scaii.common.Triangle.toObject(includeInstance, f),
    pb_delete: jspb.Message.getField(msg, 40)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scaii.common.Shape}
 */
proto.scaii.common.Shape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scaii.common.Shape;
  return proto.scaii.common.Shape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scaii.common.Shape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scaii.common.Shape}
 */
proto.scaii.common.Shape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.scaii.common.Pos;
      reader.readMessage(value,proto.scaii.common.Pos.deserializeBinaryFromReader);
      msg.setRelativePos(value);
      break;
    case 3:
      var value = new proto.scaii.common.Color;
      reader.readMessage(value,proto.scaii.common.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 20:
      var value = new proto.scaii.common.Rect;
      reader.readMessage(value,proto.scaii.common.Rect.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 21:
      var value = new proto.scaii.common.Triangle;
      reader.readMessage(value,proto.scaii.common.Triangle.deserializeBinaryFromReader);
      msg.setTriangle(value);
      break;
    case 40:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scaii.common.Shape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scaii.common.Shape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scaii.common.Shape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scaii.common.Shape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRelativePos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scaii.common.Pos.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scaii.common.Color.serializeBinaryToWriter
    );
  }
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.scaii.common.Rect.serializeBinaryToWriter
    );
  }
  f = message.getTriangle();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.scaii.common.Triangle.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeBool(
      40,
      f
    );
  }
};


/**
 * required uint64 id = 1;
 * @return {number}
 */
proto.scaii.common.Shape.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scaii.common.Shape.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.scaii.common.Shape.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pos relative_pos = 2;
 * @return {?proto.scaii.common.Pos}
 */
proto.scaii.common.Shape.prototype.getRelativePos = function() {
  return /** @type{?proto.scaii.common.Pos} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Pos, 2));
};


/** @param {?proto.scaii.common.Pos|undefined} value */
proto.scaii.common.Shape.prototype.setRelativePos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.scaii.common.Shape.prototype.clearRelativePos = function() {
  this.setRelativePos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasRelativePos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Color color = 3;
 * @return {?proto.scaii.common.Color}
 */
proto.scaii.common.Shape.prototype.getColor = function() {
  return /** @type{?proto.scaii.common.Color} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Color, 3));
};


/** @param {?proto.scaii.common.Color|undefined} value */
proto.scaii.common.Shape.prototype.setColor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.scaii.common.Shape.prototype.clearColor = function() {
  this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Rect rect = 20;
 * @return {?proto.scaii.common.Rect}
 */
proto.scaii.common.Shape.prototype.getRect = function() {
  return /** @type{?proto.scaii.common.Rect} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Rect, 20));
};


/** @param {?proto.scaii.common.Rect|undefined} value */
proto.scaii.common.Shape.prototype.setRect = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.scaii.common.Shape.prototype.clearRect = function() {
  this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasRect = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Triangle triangle = 21;
 * @return {?proto.scaii.common.Triangle}
 */
proto.scaii.common.Shape.prototype.getTriangle = function() {
  return /** @type{?proto.scaii.common.Triangle} */ (
    jspb.Message.getWrapperField(this, proto.scaii.common.Triangle, 21));
};


/** @param {?proto.scaii.common.Triangle|undefined} value */
proto.scaii.common.Shape.prototype.setTriangle = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.scaii.common.Shape.prototype.clearTriangle = function() {
  this.setTriangle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasTriangle = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required bool delete = 40;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scaii.common.Shape.prototype.getDelete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 40, false));
};


/** @param {boolean} value */
proto.scaii.common.Shape.prototype.setDelete = function(value) {
  jspb.Message.setField(this, 40, value);
};


proto.scaii.common.Shape.prototype.clearDelete = function() {
  jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scaii.common.Shape.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * @enum {number}
 */
proto.scaii.common.SerializationFormat = {
  DIVERGING: 0,
  NONDIVERGING: 1
};

