syntax = "proto2";

package scaii.common;

import "cfg.proto";
import "viz.proto";

// A simple list of `ScaiiPacket`s that have accumulated
// before the last time this module was checked for responses.
// All modules should collect their responses into a single `MultiMessage`
// when queried. 
//
// If no responses have accumulated, an empty `MultiMessage` is allowed.
message MultiMessage {
	repeated ScaiiPacket packets = 1;
}

// The main wrapper packet, everything else is in terms of this.
// All Scaii Modules are expected to handle an arbitrary `ScaiiPacket`,
// but may elect to redirect an `Error` to the `src` field if they are
// given a message they do not specifically handle (for instance,
// being given a `VizInit` packet as an environment backend).
//
// Silently ignoring unsupported packets is allowed as well, but
// passing error messages may make debugging easier.
message ScaiiPacket {
	// The specific packet this resolves to
	oneof specific_msg {
		State state = 1;
		Action action = 2;
		Viz viz = 3;
		Error err = 4;
		Cfg config = 5;
		SupportedBehavior supported = 6;
		SerializationRequest ser_req = 7;
		SerializationResponse ser_resp = 8;
		bool reset_env = 9;
		VizInit viz_init = 10;
		UserCommand user_command = 11;
		ReplayStep replay_step = 12;
		TestControl test_control = 13;
		RecorderStep recorder_step = 14;
		RecorderConfig recorder_config = 15;
		GameComplete game_complete = 16;
		ReplaySessionConfig replay_session_config = 17;
		Ack ack = 18;
		bool emit_viz = 19;
		Record record = 20;
		bool replay_mode = 21;
		EnvDescription env_desc = 22;
		ExplanationDetails expl_details = 23;
		ReplayControl replay_control = 24;
		ReplayChoiceConfig replay_choice_config = 25;
        StudyQuestions study_questions = 26;
        StudyQuestionAnswer study_question_answer = 27;
        LogFileEntry log_file_entry = 28;
		Other other = 29;
	}

	// The sender of this packet	
	required Endpoint src = 31;

	// The destination of this packet
	required Endpoint dest = 30;
}

// An acknowledgement of receipt
message Ack {}

// An `Endpoint` simply represents the module
// this message originated from or should be sent
// to.
//
// `Core`, `Agent`, and `Backend` are considered special
// cases, while a Module endpoint expects a name 
// to disambiguate it from other plugins.
//
// The `Endpoint`s have little special meaning, and
// largely only exist to minimize module name conflicts that might
// accidentally clobber an important component upon being
// registered with the core packet router. Messages are routed
// the same way with no extra checks regardless of destination Endpoint.
//
// The special exception to this is `Core` in the case of `Error` messages.
// See the `Error` description for more info.
message Endpoint {
	oneof endpoint {
		BackendEndpoint backend = 1;
		AgentEndpoint agent = 2;
		CoreEndpoint core = 3;
		ModuleEndpoint module = 4;
		ReplayEndpoint replay = 5;
		RecorderEndpoint recorder = 6;
	}
}

message ReplayStep {}

// A marker message for the registered backend.
message BackendEndpoint {}

// A marker message for the registered agent.
message AgentEndpoint {}

// A marker message for the core router and environment handler.
message CoreEndpoint {}

// A module. A name is required as multiple modules may be registered.
// If no such module exists, an Error will be routed to the packet sender
// in response.
message ModuleEndpoint {
	required string name = 1;
}

// A marker message for the replay mechanism.
message ReplayEndpoint {}

// A marker message for the recorder mechanism.
message RecorderEndpoint {}

// A basic state reply from an environment 
// featuring a feature description
// as well as a reward.
//
// Note: this is NOT the same as a visualization state.
// For communicating with the visualization suite see `Viz` and
// `VizInit`, as rendering is handled by each environment.
//
// All backends must minimally support this encoding, a dense
// n-dimensional array with some encoding that should be meaninful
// and useful for an agent to interpret as input (e.g. as neural net 
// features). If the array dimensions are unspecified, it is assumed
// to be a 1D array the same length as `features`.
//
// It need not be the **best** encoding possible, but simply a usable encoding.
//
/// Environments may, and are encouraged to, offer alternate state descriptions
// as extensions that may be requested via a `BackendCfg`. These backend environments
// may then communicate with a game wrapper for the given frontend language to decode
// that state into a more readable or queryable format for an agent to use.
// A good example being the RTS protobuf state extensions in SCAII/Sky-RTS.
//
// This extended state is allowed to have any semantics it wishes (e.g. delta
// encoding, sparse matrices etc) as long as it is well documented and
// properly handled by the matching wrappers.
//
// If the state representation is set to an alternate one by the user, 
// the features and array dimensions are allowed to be empty.
message State {
 	repeated double features = 1;
	repeated uint32 feature_array_dims = 2;
	 
	optional double reward = 3;
	
	optional bytes expanded_state = 4;
	map<string,double> typed_reward = 5;
	required bool terminal = 6;
}

// A basic action reply from an agent to a backend.
//
// The most simple version of this is a length 1 `discrete_actions`
// that denotes one of a finite number of actions specified by the environment.
//
// However, more complex representations may be used by an environment so long as they
// are documented (e.g. a Go program may elect to instead use two discrete actions representing
// an x and y for a grid square on which to place a piece).
//
// Like states, an `Action` has extensions available to be defined by each environment
// for use with a given game wrapper upon request. Each environment is encouraged, if necessary,
// to have a more descriptive action set that can be built from a matching wrapper.
//
// A good example is Sky-RTS's move list action extension, which is an enhanced representation 
// allowing agents to specify an arbitrarily complex order for each unit each state.
//
// Like the state description, if an alternate action encoding is set up by the user,
// it is legal to only set those fields and leave `discrete` and `continuous` actions blank.
message Action {
	repeated int32 discrete_actions = 1;
	repeated double continuous_actions = 2;
	
	optional bytes alternate_actions = 3;
	optional ExplanationPoint  explanation = 4;
}

// A basic error message providing a string describing what went wrong.
//
// Extensions are available to provide more specific information
// between an environment's backend and its game wrapper.
//
// An error should generally be directed to the module that sent the
// packet triggering the error. However, one may also elect to direct
// a message to `Core` which has special semantics. It will automatically
// direct the error to the "owner" of the environment.
//
// The "owner" is usually the agent which controlling the program (causing
// an exception or error log depending on the language, source and severity),
// but in certain cases such as replays this may be something like the
// visualization engine or the replay loader itself.
//
// If an error is fatal, it **will** trigger a termination of the program.
message Error {
	required string description = 1;
	optional bool fatal = 2 [default=false];

	optional bytes error_info = 3;
}

// A message meant to send info not covered by one of these
// cases between modules. The `name` field should provide some
// hint to disambiguate which type of message to decode this
// into by the recipient (this is similar to Protobuf 3's `Any` type).
//
// Using this is not advised, but is here in case it's necessary.
message Other {
	required string name = 1;
	
	optional bytes msg = 2;
}

// The type of serialization requested,
// an error may be returned if this type is not
// supported.
//
// Diverging refers to a serialization that does
// not preserve the RNG state (if any), while
// nondiverging is expected to always yield the same
// sequence of states given the same sequence of actions
// after it's loaded.
//
// In the case of deterministic environments, diverging
// and nondiverging are equivalent. 
enum SerializationFormat {
	DIVERGING = 0;
	NONDIVERGING = 1;
}

// A request to serialize the current environment
// state in the given manner. Yields an error if the
// given serialization type is not supported, or a 
// `SerializationResponse` if it is.
message SerializationRequest {
	required SerializationFormat format = 1;
}

// The serialized bytes of an environment, with the format
// requested for confirmation.
message SerializationResponse {
	required bytes serialized = 1;
	required SerializationFormat format = 2;
}
// Since Rpc waits for a response for each packet that is sent,
// but in non-testing mode, Viz does not send back state,
// we send back a UserCommand of the NONE variety as a simple Ack.  
// EXPLAIN is a standin for when explanation info is requested.

message UserCommand {
	enum UserCommandType {
		NONE = 0;
		EXPLAIN = 1;
		PAUSE = 2;
		RESUME = 3;
		REWIND = 4;
		POLL_FOR_COMMANDS= 5;
		JUMP_TO_STEP = 6;
		JUMP_COMPLETED = 7;
		SET_SPEED = 8;
		SELECT_FILE = 9;
		SELECT_FILE_COMPLETE = 10;
	}
	required UserCommandType command_type = 1;
	repeated string args = 2;
}

// Some testing requires sending special messages to test components ex. Replay controlling MockRts.
message TestControl {
	repeated string args = 1;
}

// Sent from backend to recorder each frame to denote a new
// step in the recording
message RecorderStep {
    optional Action action = 1;
    required bool is_decision_point = 2;
	optional ExplanationPoint explanation = 3;
}

// message to trigger recorder
message RecorderConfig {
	repeated ScaiiPacket pkts = 1;
	required bool overwrite = 2;
	optional string filepath = 3;
}

message GameComplete {}

// the replay files available for replay
message ReplayChoiceConfig {
	repeated string replay_filenames = 1;
}

message ReplaySessionConfig {
	required int64 step_count = 1;
	repeated uint32 explanation_steps = 2;
	repeated string explanation_titles= 3;
	repeated string chart_titles= 4;
}

// Configures a module (e.g. backend) to begin recording, logging how often 
// it should emit serialized keyframes
//
// NOTE: Since the frontend is responsible for making serialization requests and
//  forwarding packets to the recorder, `keyframe_interval` will be ignored unless the
// backend has some facility meant to take control of the game for some time.
message Record {
	required uint32 keyframe_interval = 1;
}

//
// Replay will, upon request, forward ExplanationDetails for a particular step
// the UI knows which steps have that information from ReplaySessionConfig's info
//
message ExplanationDetails {
	optional uint32 step = 1;
    optional ExplanationPoint expl_point = 2;
	optional ChartInfo chart = 3;
}

//
//  ReplayControl is a messaging channel for Replay to send control info out.
//  ex. Replay needs to tell Viz to reset it's position so it will send a command 
//  "set_step_position 23"
//
message ReplayControl {
	repeated string command = 1;
}